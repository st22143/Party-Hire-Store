import tkinter as tk
from tkinter import ttk
import json


#Predefined variables
#Will add saving system using JSON soon
row_number = 0
details = []
saved = True
pop_up_on = False

#All functions for buttons and usability are below

def load_details(): #JSON will be used to store data externally 

    global row_number, details

    with open('mydata.json', 'r') as json_file:

        details = json.loads(json_file.read()) #All stored data (if there is any) will be put into this list
        
    
        for i in details:
            table.insert(parent='', index = row_number, values=i) #Updating treeview with saved list
            row_number += 1


def save_details(event): #This function will be called when the save button is clicked

    global saved

    saved_details = json.dumps(details) #The entire list is being stored
    with open('mydata.json', 'w') as json_file:
        json_file.write(saved_details)
        print("Saved")
        saved = True
        save_log.configure(text = "Saved", fg='black')


def pop_up(title, text, size): #There may be a lot of pop up windows so it would be cleaner to keep it as a function
    pop_up = tk.Toplevel(root)
    pop_up.geometry(size)
    
    pop_up.title(title)
    tk.Label(pop_up, text = str(text)).pack()




#Checks each individual character to see if there's a number
def number_checker(number):
    for i in number:
        if i.isnumeric():
            return True
    

#Function for submitting details to the table.
def add_to_table(event):

    global saved, row_number, details

    name = False
    item = False




        
    if number_checker(receipt_box.get()): # The number_checker method which was previously created checks if receipt_box.get() has any numbers
            
        if(int(receipt_box.get()) < 10000000 and int(receipt_box.get()) > 1000000):
                receipt_number = receipt_box.get()
                receipt_warning.config(text = " ")
        else: 
                receipt_warning.config(text = "The receipt number should only have 7 characters")
        
    else:
        
        if len(receipt_box.get().strip()) != 0:
            receipt_warning.config(text = "Only enter numbers")

    if number_checker(name_box.get()):
        name_warning.config(text="There can only be letters in a name", fg = 'red')

    else:

        name = True
        name_warning.config(text = " ")

    if number_checker(number_of_items_box.get()):
        
        if(0 <= int(number_of_items_box.get()) <= 500):
            item = True
            number_of_items_warning.config(text = " ")
        else:
            number_of_items_warning.config(text = "The numbers of items can only be from 0 to 500")
    
    else:
        
        if len(number_of_items_box.get()) == 0:
            item = True
            number_of_items_warning.config(text = " ")

        else:
            number_of_items_warning.config(text = "There can only be numbers")


    if len(name_box.get().strip()) == 0 or len(items.get().strip()) == 0 or len(number_of_items_box.get().strip()) == 0 or len(receipt_box.get().strip()) == 0:

        log.config(text="Some of your texts are empty... Add something!", fg = 'red')

    else:

        log.config(text=" ")

        if name == True and item == True:  
            print("Valid")
            details.insert(row_number,[row_number, name_box.get(), str(receipt_number), items.get(), number_of_items_box.get()])
            print(details[row_number])
            table.insert(parent='', index = row_number, values=details[row_number])
            row_number+=1
            saved = False
            save_log.configure(text = "Unsaved", fg = 'red')
        
        


#Removes a row
def remove_row(event):

    global row_number, details, saved
   

    selected_item = table.selection()[0] #Selected row

    selected_details = table.item(selected_item) #Storing selected item's details including row values
    

    deleted_list = details[selected_details.get('values')[0]] #Getting a reference to the selected row from within the detail's list

    del details[selected_details.get('values')[0]] #Deleting row from the list

    #Changing the IDs
    for i in details:
        if int(i[0]) > int(deleted_list[0]):
            i[0] -= 1

    table.delete(selected_item) #Deleting row from treeview

    #Will add the new list here later

    table_row_values = table.get_children() #Getting all ID values

    row_placeholder = 0 
    for i in table_row_values: #For loop for updating the table with new list
        table.item(i, values=details[row_placeholder])
        row_placeholder+=1

    row_number -= 1
    saved = False
    save_log.configure(text = "Unsaved", fg = 'red')

#Clears table
def clear_table(event):
    
    global row_number, details, saved

    details = []
    row_number = 0 

    table_row_values = table.get_children() #Getting all ID values
    #Deletes the table IDs
    for i in table_row_values:
        table.delete(i)
    saved = False
    save_log.configure(text = "Unsaved", fg = 'red')
   


#Enables the user to edit rows
def edit_row(event):

    global saved

    name = False
    receipt = False
    item = False

    if number_checker(receipt_box.get()): # The number_checker method which was previously created checks if receipt_box.get() has any numbers
            
        if(int(receipt_box.get()) < 10000000 and int(receipt_box.get()) > 1000000):
                receipt_warning.config(text = " ")
                receipt = True
        else: 
                receipt_warning.config(text = "The receipt number should only have 7 characters")
               
        
    else:
        
        if len(receipt_box.get().strip()) != 0:
            receipt_warning.config(text = "Only enter numbers")
    

    if number_checker(name_box.get()):
        name_warning.config(text="There can only be letters in a name", fg = 'red')

    else:

        name = True
        name_warning.config(text = " ")

    if number_checker(number_of_items_box.get()):
        
        if(0 <= int(number_of_items_box.get()) <= 500):
            item = True
            number_of_items_warning.config(text = " ")
        else:
            number_of_items_warning.config(text = "The numbers of items can only be from 0 to 500")
    
    else:
        
        if len(number_of_items_box.get()) == 0:
            item = True
            number_of_items_warning.config(text = " ")

        else:
            number_of_items_warning.config(text = "There can only be numbers")

    if len(name_box.get().strip()) == 0 or len(items.get().strip()) == 0 or len(number_of_items_box.get().strip()) == 0 or len(receipt_box.get().strip()) == 0:

        log.config(text="Some of your texts are empty... Add something!", fg = 'red')

    else:
    
        if item == True and name == True and receipt == True:

            selected_item = table.selection()[0]
            selected_details = table.item(selected_item)
            row = details[selected_details.get('values')[0]] #Gets details of the selected row.


            details[row[0]] = [row[0], name_box.get(), receipt_box.get(), items.get(), number_of_items_box.get()]
            print(details)
            table.item(selected_item, values=details[row[0]])
            saved = False
            save_log.configure(text = "Unsaved", fg = 'red')



def help_function(event): #Brief tutorial for new users
    pop_up("Help", "- Select the rows you want to edit and delete.", "300x500")

    

def close_window(): #Exit button
    global saved
    
    if saved == True:
        root.destroy()
    
    if saved == False:
        pop_up("Warning!", "You have a few unsaved changes", "250x30")

#All the tkinter labels, entries, treeviews, buttons and more are below

root = tk.Tk()
root.title("Julie's Party Hire Store Details")
root.geometry("1920x1280")


title_image = tk.PhotoImage(file="Title.png")
title_image = title_image.zoom(10)
title_image = title_image.subsample(15)


title = tk.Label(root, image=title_image)
title.pack()
title.place(x=0, y=20)

name_frame = tk.Frame(root)

name_warning = tk.Label(name_frame, fg = 'red')
name_warning.pack(side='bottom')

name = tk.Label(name_frame, text = "Full Name: ", font=25)
name.pack(side="left")

name_box = tk.Entry(name_frame, width=50)
name_box.pack(side="right")


name_frame.pack(side="left")
name_frame.place(x=30, y=130)

number_items_frame = tk.Frame(root)

number_of_items_warning = tk.Label(number_items_frame, fg = 'red')
number_of_items_warning.pack(side="bottom")

number_of_items = tk.Label(number_items_frame, text = "Number Of Items: ", font=25)
number_of_items.pack(side="left")


number_of_items_box = tk.Entry(number_items_frame, width=50)
number_of_items_box.pack(side="right")


number_items_frame.pack(side="left")
number_items_frame.place(x=30, y=230)

items_frame = tk.Frame(root)

items_text = tk.Label(items_frame, text = "Item: ", font = 50)
items_text.pack(side="left")

items = ttk.Combobox(items_frame, values = ["Party Hire Stuff", "Other stuff"])                                 
items.pack(side="right")

items_frame.pack(side="left")
items_frame.place(x=30, y=330)

receipt_frame = tk.Frame(root)

receipt_warning = tk.Label(receipt_frame, fg = 'red')
receipt_warning.pack(side="bottom")

receipt_label = tk.Label(receipt_frame, text = "Receipt number: ", font = 25)
receipt_label.pack(side="left")


receipt_box = tk.Entry(receipt_frame, width=30)
receipt_box.pack(side="right")


receipt_frame.pack(side="left")
receipt_frame.place(x=30, y=430)



submit = tk.Button(root, text = "Submit", font = 50)
submit.bind("<ButtonPress>", add_to_table)
submit.pack()
submit.place(x=30, y=525)

remove_button = tk.Button(root, text = "Remove", font = 50)
remove_button.bind('<ButtonPress>', remove_row)
remove_button.pack()
remove_button.place(x=130,y=525)

save = tk.Button(root, text = "Save", font = 50)
save.bind("<ButtonPress>", save_details)
save.pack()
save.place(x = 30, y = 590)

edit = tk.Button(root, text = "Edit", font = 50)
edit.bind("<ButtonPress>", edit_row)
edit.pack()
edit.place(x=240, y= 525)

clear = tk.Button(root, text = "Clear", font = 50)
clear.bind("<ButtonPress>", clear_table)
clear.pack()
clear.place(x = 310, y = 525)


important = tk.Frame(root)

help_button = tk.Button(important, text = "Help", font = ("Arial", 10, "bold"))

help_button.bind("<ButtonPress>", help_function)
help_button.pack(side='left')

exit_button = tk.Button(important, text = "Exit", font = ("Arial", 10, "bold"), command = close_window)
exit_button.pack(side='right')

save_log = tk.Label (important, text = "Saved")
save_log.pack(side='bottom')

important.pack()

frame_table = tk.Frame(root)

#Tkinter scrollbar
table_scrollbar = ttk.Scrollbar(frame_table)
table_scrollbar.pack(side="right", fill = 'y')

#Tkinter table/treeview
table = ttk.Treeview(frame_table, columns = ["ID", "Name","Receipt Number", "Item", "Number Of Items"], height=20, yscrollcommand = table_scrollbar.set)
table.column('#0', width=0, stretch=False) #Gets rid of invisible column (shrinks it to an unnoticable level)
table.column('#01', width=50)
table.column('#02', width=150)
table.column('#03', width=150)
table.column('#04', width=150)
table.column('#05', width=150)
table.heading('ID', text = "ID")
table.heading('Name', text = "Full Name")
table.heading('Receipt Number', text = "Receipt Number")
table.heading('Item', text = "Item")
table.heading('Number Of Items', text = "Number Of Items")
table.bind('p', edit_row)

table.pack()


table_scrollbar.config(command = table.yview)

log = tk.Label(frame_table)
log.pack(side='bottom')

frame_table.pack()
frame_table.place(x=600,y=150)

load_details()

root.mainloop()

