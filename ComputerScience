import tkinter as tk
from tkinter import ttk
import random as rd
import json

#Predefined list 
#Will add saving system using JSON soon
row_number = 0
details = []



def load_details():

    global row_number
    global details

    with open('mydata.json', 'r') as json_file:

        details = json.loads(json_file.read())
        
    
        for i in details:
            table.insert(parent='', index = row_number, values=i)
            row_number += 1


def save_details(event):
    saved_details = json.dumps(details)
    with open('mydata.json', 'w') as json_file:
        json_file.write(saved_details)
        print("Saved")


def pop_up(text):
    pop_up = tk.Toplevel(root)
    pop_up.geometry("300x25")
    pop_up.title("Error")
    tk.Label(pop_up, text = str(text)).pack()




#Function for submitting details to the table.
def add_to_table(event):

    global row_number
    global details

    name = False
    item = False
    
        
    #Random number generator
    receipt_number = rd.randint(1,500)

    if number_checker(name_box.get()):
        pop_up("The full name must only have letters")

    else:

        name = True

    if number_checker(number_of_items_box.get()):
        if(0 <= int(number_of_items_box.get()) <= 500):
            item = True
        else:
            pop_up("The number of items must be less than or equal to 500 and greater than or equal to 0")
    
    else:
        if len(number_of_items_box.get()) == 0:
            item = True

        else:
            pop_up("The number of items must only have numbers")

        

    if name == True and item == True:  
        print("Valid")
        details.insert(row_number,[row_number,name_box.get(), str(receipt_number), items.get(), number_of_items_box.get()])

        table.insert(parent='', index = row_number, values=details[row_number])
        row_number+=1

    


#Checks each individual character to see if there's a number
def number_checker(number):
    for i in number:
        if i.isnumeric():
            return True
    

#Removes a row
def remove_row(event):

    global row_number
    global details

   

    selected_item = table.selection()[0] #Selected row

    selected_details = table.item(selected_item) #Storing selected item's details including row values
    

    deleted_list = details[selected_details.get('values')[0]] #Getting a reference to the selected row from within the detail's list

    del details[selected_details.get('values')[0]] #Deleting row from the list

    #Changing the IDs
    for i in details:
        if int(i[0]) > int(deleted_list[0]):
            i[0] -= 1

    table.delete(selected_item) #Deleting row from treeview

    #Will add the new list here later

    table_row_values = table.get_children() #Getting all ID values

    row_placeholder = 0 
    for i in table_row_values: #For loop for updating the table with new list
        table.item(i, values=details[row_placeholder])
        row_placeholder+=1

    row_number -= 1

#Clears table
def clear_table(event):
    
    global row_number
    global details

    details = []
    row_number = 0 

    table_row_values = table.get_children() #Getting all ID values
    #Deletes the table IDs
    for i in table_row_values:
        table.delete(i)
   
#Enables the user to edit rows
def edit_row(event):
   
    selected_item = table.selection()[0]
    selected_details = table.item(selected_item)
    row = details[selected_details.get('values')[0]] #Gets details of the selected row.

    details[row[0]] = [row[0], name_box.get(), row[2], items.get(), number_of_items_box.get()]

    table.item(selected_item, values=details[row[0]])


#Tkinter
root = tk.Tk()
root.title("Julie's Party Hire Store Details")
root.geometry("1920x1280")

title = tk.Label(root, text = "Julie's Party Hire Store", font = 100)
title.pack()
title.place(x=30, y=30)

name = tk.Label(root, text = "Full Name: ", font=25)
name.pack()
name.place(x=30, y=150)

name_box = tk.Entry(root, width=50)
name_box.pack()
name_box.place(x=150,y=150)


number_of_items = tk.Label(root, text = "Number Of Items: ", font=25)
number_of_items.pack()
number_of_items.place(x=30, y=250)

number_of_items_box = tk.Entry(root, width=50)
number_of_items_box.pack()
number_of_items_box.place(x=200,y=250)

items_text = tk.Label(root, text = "Item: ", font = 50)
items_text.pack()
items_text.place(x=30, y=350)

remove_button = tk.Button(root, text = "Remove", font = 50)
remove_button.bind("<ButtonPress>", remove_row)
remove_button.pack()
remove_button.place(x=600,y=525)

items = ttk.Combobox(root, values = "test")                                 
items.pack()
items.place(x=100, y=350)

receipt_label = tk.Label(root, text = "Receipt number: ", font = 25)
receipt_label.pack()
receipt_label.place(x=30, y=450)

receipt_box = tk.Entry(root, width=50)
receipt_box.pack()
receipt_box.place(x=150, y=450)

submit = tk.Button(root, text = "Submit", font = 50)
submit.bind("<ButtonPress>", add_to_table)
submit.pack()
submit.place(x=300, y=500)

save = tk.Button(root, text = "Save", font = 50)
save.bind("<ButtonPress>", save_details)
save.pack()
save.place(x = 700, y = 525)

clear = tk.Button(root, text = "Clear", font = 50)
clear.bind("<ButtonPress>", clear_table)
clear.pack()
clear.place(x = 800, y = 525)

edit = tk.Button(root, text = "Edit", font = 50)
edit.bind("<ButtonPress>", edit_row)
edit.pack()
edit.place(x=900, y= 525)




#Tkinter table/treeview
table = ttk.Treeview(root, columns = ["ID", "Name","Receipt Number", "Item", "Number Of Items"], height=20)
table.column('#0', width=0, stretch=False) #Gets rid of invisible column
table.column('#01', width=50)
table.column('#02', width=150)
table.column('#03', width=150)
table.column('#04', width=150)
table.column('#05', width=150)
table.heading('ID', text = "ID")
table.heading('Name', text = "Full Name")
table.heading('Receipt Number', text = "Receipt Number")
table.heading('Item', text = "Item")
table.heading('Number Of Items', text = "Number Of Items")

table.pack()
table.place(x=600,y=100)

#Tkinter scrollbar
table_scrollbar = ttk.Scrollbar(root, orient ="vertical", command = table.yview)
table_scrollbar.pack(side="right")

load_details()



root.mainloop()